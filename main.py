from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import sqlite3
import openpyxl
import datetime
import aioschedule
import asyncio

bot = Bot(token='5357337704:AAFKs87RQe0U-6pmOaZlsC7qBYyM156NpC8')
dp = Dispatcher(bot)

connection = sqlite3.connect('Users.db')
cur = connection.cursor()

wb = openpyxl.load_workbook('schedule.xlsx')
sheets = wb.sheetnames
sheet = wb[sheets[0]]
fixed_schedule = False

week_days = {'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–í—Ç–æ—Ä–Ω–∏–∫': 1, '–°—Ä–µ–¥–∞': 2, '–ß–µ—Ç–≤–µ—Ä–≥': 3, '–ü—è—Ç–Ω–∏—Ü–∞': 4, '–°—É–±–±–æ—Ç–∞': 5, '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6}
week = {0: (6, 12), 1: (12, 18), 2: (18, 24), 3: (24, 30), 4: (30, 36), 5: (36, 42), 6: (42, 48)}
groups = {'1–±–¥1': 'C', '1–±–¥3': 'D', '1–±—É1': 'E', '1–±—É2': 'F', '1–±—É3': 'G', '1–≤–±1': 'H', '1–≤–±2': 'I', '1–≤–±3': 'J',
          '1–∏—Å1': 'K', '1–∏—Å3': 'L', '1–ø–∫1': 'M', '1–ø–∫2': 'N', '1—Å–∞1': 'O', '1—Å–∞3': 'P', '2–±–¥1': 'Q', '2–±–¥2': 'R',
          '2–±–¥3': 'S', '2–±–¥4': 'T', '2–±—É1': 'U', '2–±—É2': 'V', '2–±—É3': 'W', '2–≤–±1': 'X', '2–≤–±3': 'Y', '2–∏—Å1': 'Z',
          '2–∏—Å2': 'AA', '2–∏—Å3': 'AB', '2–ø–∫1': 'AC', '2–ø–∫2': 'AD', '2—Å–∞1': 'AE', '2—Å–∞3': 'AF', '3–±—É1': 'AG',
          '3–±—É2': 'AH', '3–∏—Å1': 'AI', '3–∏—Å2': 'AJ', '3–∏—Å3': 'AK', '3–∏—Å4': 'AL', '3–ø–∫1': 'AM', '3–ø–∫2': 'AN',
          '3—Å–∞1': 'AO', '3—Å–∞2': 'AP', '3—Å–∞3': 'AQ'}


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç! üëã' \
           '\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00 –ø–æ –ú–°–ö' \
           '\n1‚É£–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É—á–∏—à—å—Å—è, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: <–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã>' \
           '\n‚ùó–ù–∞–ø—Ä–∏–º–µ—Ä: 1–≤–±2' \
           '\n2‚É£–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ' \
           '\n‚ùó–ù–∞–ø—Ä–∏–º–µ—Ä: 1–≤–±2' \
           '\n3‚É£–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ –º–Ω–µ: <–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏> ' \
           '\n‚ùó–ù–∞–ø—Ä–∏–º–µ—Ä: –ß–µ—Ç–≤–µ—Ä–≥' \
           '\n4‚É£–£ –º–µ–Ω—è –µ—Å—Ç—å –µ—â–µ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å: <–ó–∞–≤—Ç—Ä–∞> –∏–ª–∏ <–°–µ–≥–æ–¥–Ω—è>, —Ç–æ —è —Ç–µ–±–µ –ø—Ä–∏—à–ª—é —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å' \
           '\n5‚É£T–∞–∫–∂–µ, –µ—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∫–∏–¥–∞—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ'
    await bot.send_message(chat_id=message.chat.id, text=text)
    if not cur.execute(f'''select chat_id From user_info
                        where chat_id = {message.chat.id} ''').fetchall():
        cur.execute("INSERT INTO user_info(chat_id, groups, admin)"
                    "VALUES(?, ?, ?)",
                    (message.chat.id, 'None', False))
        connection.commit()


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text="–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–∫–∏–¥—ã–≤–∞—Ç —Ç–µ–±–µ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!")


@dp.message_handler(text=['–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ü–æ–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
async def edit_schedule(message: types.Message):
    global fixed_schedule
    if cur.execute(f'''select admin From user_info
                            where chat_id = {message.chat.id} ''').fetchall()[0][0]:

        await bot.send_message(chat_id=message.chat.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        fixed_schedule = True
    else:
        await bot.send_message(chat_id=message.chat.id, text="–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")


@dp.message_handler(text=['–ó–∞–≤—Ç—Ä–∞', '–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞'])
async def schedule(message: types.Message):
    text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "' + str(cur.execute(f'''select groups From user_info
                                        where chat_id = {message.chat.id} ''').fetchall()[0][0]) + '"\n\n'
    try:
        cort = week[datetime.datetime.today().weekday() + 1]
    except IndexError:
        cort = week[0]
    group = groups[cur.execute(f'''select groups From user_info
                                    where chat_id = {message.chat.id} ''').fetchall()[0][0]]
    for i in range(*cort):
        cell = sheet[f'{group}{str(i)}']
        if str(cell.value) == 'None':
            text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} ----------- \n'
        else:
            text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} {str(cell.value)}\n'
    await bot.send_message(chat_id=message.chat.id, text=text)


@dp.message_handler(text=['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', '–°–µ–≥–æ–¥–Ω—è'])
async def schedule(message: types.Message):
    text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "' + str(cur.execute(f'''select groups From user_info
                                        where chat_id = {message.chat.id} ''').fetchall()[0][0]) + '"\n\n'
    cort = week[datetime.datetime.today().weekday()]
    group = groups[cur.execute(f'''select groups From user_info
                                    where chat_id = {message.chat.id} ''').fetchall()[0][0]]
    for i in range(*cort):
        cell = sheet[f'{group}{str(i)}']
        if str(cell.value) == 'None':
            text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} ----------- \n'
        else:
            text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} {str(cell.value)}\n'
    await bot.send_message(chat_id=message.chat.id, text=text)


@dp.message_handler(text=['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'])
async def schedule(message: types.Message):
    cort = week[week_days[message.text]]
    text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "' + str(cur.execute(f'''select groups From user_info
                                    where chat_id = {message.chat.id} ''').fetchall()[0][0]) + '"\n\n'
    group = groups[cur.execute(f'''select groups From user_info
                                    where chat_id = {message.chat.id} ''').fetchall()[0][0]]
    for i in range(*cort):
        cell = sheet[f'{group}{str(i)}']
        if str(cell.value) == 'None':
            text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} ----------- \n'
        else:
            text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} {str(cell.value)}\n'
    await bot.send_message(chat_id=message.chat.id, text=text)


@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    global fixed_schedule
    if message.text not in groups:
        if cur.execute(f'''select groups From user_info
                                where chat_id = {message.chat.id} ''').fetchall() == [('None',)]:
            await bot.send_message(chat_id=message.chat.id, text='–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        if fixed_schedule:
            for i in cur.execute(f'''select chat_id From user_info''').fetchall():
                await bot.send_message(chat_id=i[0], text=message.text)
                fixed_schedule = False
    else:
        cur.execute(f'''UPDATE user_info
                    SET groups = '{message.text}'
                    WHERE chat_id = {message.chat.id} ''')
        connection.commit()
        await bot.send_message(chat_id=message.chat.id,
                               text=f'–í –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞ –≥—Ä—É–ø–ø–∞ "{message.text}"')


async def morning():  # —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–æ–µ —É—Ç—Ä–æ
    chat_id = cur.execute(
        f'''select chat_id From user_info''').fetchall()  # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏–∑ –ë–î —Å –≤–∫–ª —É–≤–µ–¥–º–æ–ª–µ–Ω–∏—è–º–∏
    for i in chat_id:  # –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω—ã–º —é–∑–µ—Ä–∞–º
        text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "' + str(cur.execute(f'''select groups From user_info
                                                    where chat_id = {i} ''').fetchall()[0][0]) + '"\n\n'
        cort = week[datetime.datetime.today().weekday()]
        group = groups[cur.execute(f'''select groups From user_info
                                                where chat_id = {i} ''').fetchall()[0][0]]
        for i in range(*cort):
            cell = sheet[f'{group}{str(i)}']
            if str(cell.value) == 'None':
                text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} ----------- \n'
            else:
                text += f'–ü–∞—Ä–∞ ‚Ññ{abs(cort[0] - i) + 1} {str(cell.value)}\n'
        await bot.send_message(i, text)  # –ø—Ä–∏—Å—ã–ª–∞–µ–º –ø–æ–≥–æ–¥—É


async def scheduler():  # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    try:
        aioschedule.every().day.at("08:00").do(morning)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ä–∞–±–∞–æ—Ç—ã–≤–∞–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        while True:
            await aioschedule.run_pending()
            await asyncio.sleep(1)
    except Exception:
        pass


async def on_startup(dp):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
